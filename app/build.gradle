plugins {
    id "de.undercouch.download" version "3.4.3"
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'


def static compileUrl(def version, def arch) {
    return "https://dist.ipfs.io/go-ipfs/${version}/go-ipfs_${version}_linux-${arch}.tar.gz"
}

def static compileFilename(def version, def arch) {
    return "go-ipfs_${version}_linux-${arch}.tar.gz"
}

def static compileDestName(def name) {
    return "${name}"
}

task downloadIPFSBinaries {
    doLast {
        def ipfsVers = "v0.4.19"
        def supportedArchList = ["arm", "arm64", "386", "amd64"]
        def destDir = "./assets"
        supportedArchList.each {
            def dstFile = new File(destDir, it)
            if (!dstFile.exists()) {
                def tempFile = new File(buildDir, compileFilename(ipfsVers, it))
                println tempFile
                def url = compileUrl(ipfsVers, it)
                try {
                    download {
                        src url
                        dest tempFile
                        overwrite false
                    }
                } catch(Exception e) {
                    println e
                    throw e
                }
                def destName = compileDestName(it)
                println destName
                copy {
                    from(tarTree(resources.gzip(tempFile))) {
                        include "go-ipfs/ipfs"
                        eachFile { fcd ->
                            fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(1))
                        }
                        includeEmptyDirs = false
                    }
                    into destDir
                    rename "ipfs", destName
                }
            }
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.equals('assembleRelease')) {
        task.dependsOn downloadIPFSBinaries
    }
    else if (task.name.equals('assembleDebug')) {
        task.dependsOn downloadIPFSBinaries
    }
}


android {
    compileSdkVersion 27
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    defaultConfig {
        applicationId "fr.rhaz.ipfs.sweet"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 24
        versionName "0.2.4"
        archivesBaseName = "sweetipfs-$versionName"
        vectorDrawables.useSupportLibrary = true
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "../../../../apk/$archivesBaseName-${variant.name}.apk"
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'app.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }
}

repositories {
    google()
    jcenter()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.0.1"

    def support_version = '27.1.1'
    implementation "com.android.support:support-v13:$support_version"
    implementation "com.android.support:appcompat-v7:$support_version"
    implementation "com.android.support:design:$support_version"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    implementation "org.ligi:tracedroid:1.4"
    implementation 'com.github.kenglxn.QRGen:android:2.4.0'
    implementation 'com.github.ipfs:java-ipfs-api:v1.2.2'
    implementation 'com.github.multiformats:java-multiaddr:v1.3.1'
    implementation 'com.google.code.gson:gson:2.8.5'

    def anko_version = "0.10.8"
    implementation "org.jetbrains.anko:anko-commons:$anko_version"
    implementation "org.jetbrains.anko:anko-sdk27:$anko_version"
    implementation "org.jetbrains.anko:anko-appcompat-v7:$anko_version"
}
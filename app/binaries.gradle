def static compileUrl(def version, def arch) {
    return "https://dist.ipfs.io/go-ipfs/${version}/go-ipfs_${version}_linux-${arch}.tar.gz"
}

def static compileFilename(def version, def arch) {
    return "go-ipfs_${version}_linux-${arch}.tar.gz"
}

def static compileDestName(def name) {
    return "${name}"
}

tasks.whenTaskAdded { task ->
    if(task.name in ['assembleRelease', 'assembleDebug'])
        task.dependsOn downloadIPFSBinaries
}

task downloadIPFSBinaries {
    doLast {
        println "Downloading binaries..."
        def ipfsVers = "v0.4.20"
        def supportedArchList = ["arm", "arm64", "386", "amd64"]
        def destDir = "./src/main/assets"
        supportedArchList.each {
            def dstFile = new File(destDir, it)
            if (!dstFile.exists()) {
                def tempFile = new File(buildDir, compileFilename(ipfsVers, it))
                println tempFile
                def url = compileUrl(ipfsVers, it)
                try {
                    download {
                        src url
                        dest tempFile
                        overwrite false
                    }
                } catch(Exception e) {
                    println e
                    throw e
                }
                def destName = compileDestName(it)
                println destName
                copy {
                    from(tarTree(resources.gzip(tempFile))) {
                        include "go-ipfs/ipfs"
                        eachFile { fcd ->
                            fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(1))
                        }
                        includeEmptyDirs = false
                    }
                    into destDir
                    rename "ipfs", destName
                }
            }
        }
    }
}